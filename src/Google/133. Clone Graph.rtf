{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs32 \cf2 \expnd0\expndtw0\kerning0
Input:\
GraphNode node\
\'a0\
Output:\
GraphNode node\
\'a0\
\'a0\
Sample 1:\
1 -> 2,3\
2 -> 3,4\
3 -> 4 \
\'a0\
Sample 2: \
Null\
\'a0\
Sample 3:\
1\
\'a0\
\'a0\
Approach:\
BFS AdjList:\
1 -> 2,3\
2 -> 1,3,4\
3 -> 1,2,4 \
4 -> 2,3\
\'a0\
1 -> Node \'96 2, 3\
2 -> Node \'96 1, 3, 4\
3 -> Node \'96 1, 2, 4\
4 -> Node \'96 2, 3\
\'a0\
Time complexity : O(V+E)\
Space complexity : O(V)\
\'a0\
Code:\
\'a0\
public class GraphNode \{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 private int value;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 private List<GraphNode> neighbors = new ArrayList<>();\
\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 public GraphNode(int value)\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 this.value = value;\
\pard\pardeftab720\fi960\partightenfactor0
\cf2 \}\
\'a0\
public void addNeighbor(GraphNode node)\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 neighbors.add(Node);\
\}\
\'a0\
public List<GraphNode> getNeighbors()\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 return neighbors;\
\}\
\'a0\
public int getValue()\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 return value;\
\}\
\'a0\
public GraphNode clone()\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 return new GraphNode(this.value);\
\}\
\pard\pardeftab720\partightenfactor0
\cf2 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \
\}\
\'a0\
public class GraphCloner \{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 private HashSet<Integer> visitedNodes = new HashSet<>();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 private GraphNode resultNode = null;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 private Queue<GraphNode> queue = null;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 private Hashmap<Integer, GraphNode> nodeMap = new HashMap<>();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 private void cloneBFS()\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 while(!queue.isEmpty)\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 node = queue.remove();\
\pard\pardeftab720\li1920\fi960\partightenfactor0
\cf2 visitedNodes.add(node);\
GraphNode currentNode = fetchNewNode(node.getValue());\
\pard\pardeftab720\partightenfactor0
\cf2 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 for(GraphNode neighbor : node.getNeighbors())\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 currentNode.addNeighbors(fetchNewNode(neighbor.getValue());\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 if(!visitedNode.conatins(neighbor))\{\
\pard\pardeftab720\li1920\fi960\partightenfactor0
\cf2 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 queue.add(neighbor);\
\pard\pardeftab720\li2880\fi960\partightenfactor0
\cf2 \}\
\pard\pardeftab720\li1920\fi960\partightenfactor0
\cf2 \}\
\'a0\
\pard\pardeftab720\li960\fi960\partightenfactor0
\cf2 \}\
\pard\pardeftab720\fi960\partightenfactor0
\cf2 \}\
\pard\pardeftab720\partightenfactor0
\cf2 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 private GraphNode fetchNewNode(int value)\{\
\pard\pardeftab720\li960\fi960\partightenfactor0
\cf2 if(nodesMap.containsKey(value))\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 return nodesMap.get(value);\
\}\
GraphNode newNode = node.clone();\
nodeMap.put(value, newNode);\
return newNode;\
\pard\pardeftab720\fi960\partightenfactor0
\cf2 \}\
\pard\pardeftab720\partightenfactor0
\cf2 \'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 public GraphNode clone(GraphNode node) \{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 if(node == null)\{\
\pard\pardeftab720\fi960\partightenfactor0
\cf2 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 return null;\
\pard\pardeftab720\li960\fi960\partightenfactor0
\cf2 \}\
queue = new LinkedList<>();\
queue.add(node);\
\pard\pardeftab720\partightenfactor0
\cf2 \'a0\
\pard\pardeftab720\li960\fi960\partightenfactor0
\cf2 resultNode = fetchNewNode(node.getValue());\
\pard\pardeftab720\partightenfactor0
\cf2 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 cloneByBFS();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 return resultNode;\
\pard\pardeftab720\fi960\partightenfactor0
\cf2 \}\
\pard\pardeftab720\partightenfactor0
\cf2 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \
\}\
\'a0\
Testing:\
1 -> 2,3\
2 -> 1, 3,4\
3 -> 4 \
\'a0\
q:\
2 3\
\'a0\
map:\
1 -> 1\
2 -> 2\
3 -> 3\
\'a0\
visited:\
1, 2\
\'a0\
output: \
1 -> 2, 3\
2 -> 1, 3, 4\
3 -> 1, 2, 4\
4 -> 2, 3\
\'a0\
return 1\
\'a0\
Test2:\
\'a0\
null\
\'a0\
return null\
\'a0\
Test 3:\
1\
return 1\
}