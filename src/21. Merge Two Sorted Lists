/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        if(list1 == null){
            return list2;
        }
        if(list2 == null){
            return list1;
        }
        ListNode head = list1;
        ListNode previousNode = null;
    
        while(list1 != null && list2 != null){
            if(list1.val > list2.val){
                ListNode nextNode = list2.next;
                list2.next = list1;  
                if(previousNode != null){
                    previousNode.next = list2;   
                }
                else {
                    head = list2;
                }
                previousNode = list2;
                list2 = nextNode;  
            }
            else {
                previousNode = list1;
                list1 = list1.next;
            }
        }
     
        if(list2 != null ){
            previousNode.next = list2;
        }
        return head;

    }
}


//Recursion - reference

class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if (l1 == null) {
            return l2;
        }
        else if (l2 == null) {
            return l1;
        }
        else if (l1.val < l2.val) {
            l1.next = mergeTwoLists(l1.next, l2);
            return l1;
        }
        else {
            l2.next = mergeTwoLists(l1, l2.next);
            return l2;
        }

    }
}
