class Node {
    private int key;
    private int value;
    private Node previousNode;
    private Node nextNode;

    public Node(int key, int value, Node previousNode, Node nextNode){
        this.key = key;
        this.value = value;
        this.previousNode = previousNode;
        this.nextNode = nextNode;
    }

    public Node(int key, int value){
        this.key = key;
        this.value = value;
        this.previousNode = null;
        this.nextNode = null;
    }

    public Node(){
        this.previousNode = null;
        this.nextNode = null;
    }

    public void setValue(int value){
        this.value = value;
    }

    public void setPreviousNode(Node previousNode){
         this.previousNode = previousNode;
    }

    public void setNextNode(Node nextNode){
        this.nextNode = nextNode;
    }

    public int getKey(){
        return this.key;
    }

    public int getValue(){
        return this.value;
    }

    public Node getPreviousNode(){
        return this.previousNode;
    }

    public Node getNextNode(){
        return this.nextNode;
    }
}

class DoublyLinkedList{
    private Node head;
    private Node tail;

    public DoublyLinkedList(){
        head = new Node();
        tail = new Node();
        head.setNextNode(tail);
        tail.setPreviousNode(head);
    }

    public void addInFront(Node node){
        node.setPreviousNode(head);
        node.setNextNode(head.getNextNode());
        head.getNextNode().setPreviousNode(node);
        head.setNextNode(node);
    }

    private void removeNode(Node node){
        node.getPreviousNode().setNextNode(node.getNextNode());
        node.getNextNode().setPreviousNode(node.getPreviousNode());
    }

    public int removeTail(){
        Node lastNode = tail.getPreviousNode();
        removeNode(lastNode);
        return lastNode.getKey();
    }

    public void moveToFront(Node node){
        removeNode(node);
        addInFront(node);
    }
}

class LRUCache {

    private DoublyLinkedList cacheNodes = new DoublyLinkedList();
    private Map<Integer, Node> cacheMap = new HashMap<Integer, Node>();
    private int capacity;
    private int size;

    public LRUCache(int capacity) {
        this.capacity = capacity;
        this.size = 0;
    }
    
    public int get(int key) {
        if(cacheMap.containsKey(key)){
            Node nodePresent = cacheMap.get(key);
            cacheNodes.moveToFront(nodePresent);
            return nodePresent.getValue();
        }
        return -1;
    }
    
    public void put(int key, int value) {
        if(cacheMap.containsKey(key)){
            Node nodePresent = cacheMap.get(key);
            nodePresent.setValue(value);
            cacheNodes.moveToFront(nodePresent);
        }
        else {
            Node newNode = new Node(key, value);
            cacheNodes.addInFront(newNode);
            cacheMap.put(key, newNode);
            size++;
            if(size > capacity){
                int leastUsed = cacheNodes.removeTail();
                cacheMap.remove(leastUsed);
                size--;
            }
        }
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
